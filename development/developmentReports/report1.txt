Было проведено тестирование СА Svace(version) на наборе тестовых случаев juliet(version)
для следующих категорий дефектов:
1) CWE121_Stack_Based_Buffer_Overflow
2) CWE122_Heap_Based_Buffer_Overflow
3) CWE134_Uncontrolled_Format_String

Всего на тестовых файлах из категорий выше было выявлено 14478 срабатывания.
Автоматический анализ результатов анализа Svace
путем сравнения со спецификацией в наборе juliet дал следующие результаты:
6081 срабатываний из 14478 срабатываний истинны
Далее для каждой категории дефектов:

1) CWE121_Stack_Based_Buffer_Overflow:
++TAINTED_ARRAY_INDEX.EX: 172/184 12
++TAINTED_ARRAY_INDEX.MIGHT: 73/106 33
+UNREACHABLE_CODE: 0/198 198
+INVARIANT_RESULT: 0/285 285
+REDUNDANT_COMPARISON.RET: 0/166 166
+UNREACHABLE_CODE.RET: 0/184 184
+ -?SIMILAR_BRANCHES: 0/71 71
+UNUSED_VALUE: 0/10 10
- +?UNUSED_VALUE.PARAM_ASSIGN: 0/26 26
++ TAINTED_ARRAY_INDEX: 25/32 7
++ -?BUFFER_SHIFT: 19/79 60 вместе с BUFFER_SIZE_MISMATCH
+UNCHECKED_FUNC_RES.LIB.STRICT: 5/111 106
+ -?BUFFER_OVERFLOW.EX: 368/468 100 Вместе с DYNAMIC_OVERFLOW.EX
+REDUNDANT_COMPARISON.ALWAYS_FALSE: 0/13 13
+PROC_USE.RAND: 5/111 106
++ -?DYNAMIC_OVERFLOW.EX: 282/332 50 Вместе с BUFFER_OVERFLOW.EX
- ?DEREF_OF_NULL.EX: 6/24 18
- ???DEREF_OF_NULL.ASSIGN: 12/36 24
+PROC_USE.VULNERABLE: 476/1039 563
++ -? BUFFER_OVERFLOW.STRING: 442/454 12 после sink
- ???UNINIT.LOCAL_VAR: 253/863 610 like DEREF_OF_NULL.ASSIGN
++ OVERFLOW_AFTER_CHECK.EX: 65/65 0
++ OVERFLOW_UNDER_CHECK: 45/45 0
++ BUFFER_SIZE_MISMATCH: 155/155 0
+ ?STRING_OVERFLOW: 182/290 108

2) CWE122_Heap_Based_Buffer_Overflow:

+ -?DYNAMIC_OVERFLOW.EX: 1356/1505 149
ALLOC_SIZE_MISMATCH: 3/144 141
+INVARIANT_RESULT: 0/344 344
- ?DEREF_OF_NULL.EX: 90/276 186
+REDUNDANT_COMPARISON.RET: 0/192 192
+UNREACHABLE_CODE.RET: 0/228 228
- +?UNUSED_VALUE.PARAM_ASSIGN: 0/246 246
+MISSING_COPY_CTOR_ASSIGN_OP: 2/206 204
++ DYNAMIC_SIZE_MISMATCH: 339/339 0
- ???DEREF_OF_NULL.ASSIGN: 179/532 353
+ ?MEMORY_LEAK: 1/221 220
+PROC_USE.VULNERABLE: 522/1126 604
+ ?MEMORY_LEAK.EX: 1/16 15
+ ?MEMORY_LEAK.STRUCT: 0/53 53
+ ?MEMORY_LEAK.CTOR: 0/2 2
+UNREACHABLE_CODE: 0/396 396
++TAINTED_INT.PTR.MIGHT: 146/146 0
+ -?SIMILAR_BRANCHES: 0/32 32
+UNUSED_VALUE: 0/20 20
++TAINTED_INT.PTR: 38/38 0
+UNCHECKED_FUNC_RES.LIB.STRICT: 0/222 222
+ -?DYNAMIC_OVERFLOW: 38/158 120
+REDUNDANT_COMPARISON.ALWAYS_FALSE: 0/26 26
+PROC_USE.RAND: 0/222 222
++ -?BUFFER_OVERFLOW.STRING: 518/546 28
- ???DEREF_OF_NULL.EX.COND: 36/108 72
++TAINTED_ARRAY_INDEX.EX: 62/74 12
+ ?STRING_OVERFLOW: 152/260 108
+ ?MEMORY_LEAK.EX.EXCEPTION: 13/60 47
- ???UNINIT.LOCAL_VAR: 0/9 9
++ ?SIZEOF_POINTER_TYPE: 0/144 144

3) CWE134_Uncontrolled_Format_String:

+INVARIANT_RESULT: 0/250 250
+REDUNDANT_COMPARISON.RET: 0/100 100
+UNREACHABLE_CODE.RET: 0/100 100
+ -?SIMILAR_BRANCHES: 0/55 55
+PROC_USE.VULNERABLE: 0/150 150
+PROC_USE.VULNERABLE.GETENV: 0/555 555
-- ?HANDLE_LEAK.EX.EXCEPTION: 0/30 30

Далее была произведена проверка на истинность срабатывания тех срабатываний,
которых автоматическая проверка посчитала ложными. Далее для каждого типа ошибок в каждой категории дефектов отдельно:


############################################################
############################################################


1) CWE121_Stack_Based_Buffer_Overflow:

    TAINTED_ARRAY_INDEX.EX 12/12

Все распознанные автоматически ложно срабатывания Svace являются на самом деле истинными, поскольку по техническим причинам
строки с ошибкой на соответствующей строке не были включены в спецификацию juliet. Срабатывания указывают на вызов
дефектной функции и являются информативными предупреждениями

Примечание: почему предупреждение идет на 31, а не на 30 строку в оригинальных cpp файлах?

    UNREACHABLE_CODE: 198/198

Вручную были проверены  198 оставшихся сравнений. Все сравнения на самом деле являются истинными, поскольку в наборе
данных juliet в "goodG2B" фунциях в данной категории дефектов иницилизируется переменная data числом 7, проверяется на >0
else ветка проверки не выполняется. На это и ругается Svace.

    INVARIANT_RESULT: 285/285

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как 5!=5 или 5==5. На такие выражения и ругается Svace.

    REDUNDANT_COMPARISON.RET: 166/166

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как функцию, возвращающую соответствующее константное значение. На это и ругается Svace.

    UNREACHABLE_CODE.RET: 184/184

Все срабатывания являются истинными, представляют из себя код, не выполняющийся в случае
присутствия дефекта типа REDUNDANT_COMPARISON.RET, что для тестирования повсеместно в juliet.

    SIMILAR_BRANCHES: 71/71

Все срабатывания детектора являются истинными. Анализатор срабатывает на условный оператор if с условием формата
*ReturnsTrueOrFalse. Обе ветви оператора во всех случаях действительно идентичны.

ПРИМЕЧАНИЕ: в ряде случаев по какой-то причине Svace выдает предупреждение не на сам if с такой функцией, а раньше по строкам.
В частности предупреждение перепрыгивает "мертвый код" на строке 184 и выдается на строку 183, когда дефект на 185 в
файле: CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12.c

    UNUSED_VALUE: 10/10

Срабатывания детектора являются истинными. Анализатор ловит частое переписывание переменной data = -1 в data = 7,
повсеместное в juliet в goodG2B функциях.

    PROC_USE.VULNERABLE: 563/563

Срабатывания детектора являются истинными. Анализатор ловит использование небезопасных самих по себе функций, как пример -
функция wscpy.

    UNUSED_VALUE.PARAM_ASSIGN 0/26

Во первых само срабатывание не имеет отношения к CWE 121 и 122, во вторых значение во многих случаях сразу же возвращается
(возьмем почти любой файл), что означает, что переменная не unused.

Примечание: кроме того в этих файлах, где замечена ошибка, не найден сам primary дефект (либо я не понял сам flaw).
############################################################
############################################################


2) CWE122_Heap_Based_Buffer_Overflow:

    TAINTED_ARRAY_INDEX.EX 12/12

Все распознанные автоматически ложно срабатывания Svace являются на самом деле истинными, поскольку по техническим причинам
строки с ошибкой на соответствующей строке не были включены в спецификацию juliet. Срабатывания указывают на вызов
дефектной функции и являются информативными предупреждениями.

Примечание: почему предупреждение идет на 31, а не на 30 строку в оригинальных cpp файлах?

    UNREACHABLE_CODE: 396/396

Вручную были проверены все 396 оставшихся сравнений. Все сравнения на самом деле являются истинными, поскольку в наборе
данных juliet в "goodG2B" фунциях в данной категории дефектов иницилизируется переменная data числом 7, проверяется на >0
else ветка проверки не выполняется. На это и ругается Svace.

    INVARIANT_RESULT: 344/344

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как 5!=5 или 5==5. На такие выражения и ругается Svace.

    REDUNDANT_COMPARISON.RET: 192/192

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как функцию, возвращающую соответствующее константное значение. На это и ругается Svace.

    UNREACHABLE_CODE.RET: 228/228

Все срабатывания являются истинными, представляют из себя код, не выполняющийся в случае
присутствия дефекта типа REDUNDANT_COMPARISON.RET, что для тестирования повсеместно в juliet.

    SIMILAR_BRANCHES: 32/32

Все срабатывания детектора являются истинными. Анализатор срабатывает на условный оператор if с условием формата
*ReturnsTrueOrFalse. Обе ветви оператора во всех случаях действительно идентичны.

ПРИМЕЧАНИЕ: в ряде случаев по какой-то причине Svace выдает предупреждение не нас сам if с такой функцией, а раньше по строкам.
В частности предупреждение перепрыгивает "мертвый код" на строке 184 и выдается на строку 183, когда дефект на 185 в
файле: CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12.c

    UNUSED_VALUE: 20/20

Срабатывания детектора являются истинными. Анализатор ловит частое переписывание переменной data = -1 в data = 7,
повсеместное в juliet в goodG2B функциях.

    PROC_USE.VULNERABLE: 604/604

Срабатывания детектора являются истинными. Анализатор ловит использование небезопасных самих по себе функций, как пример -
функция wscpy.

UNUSED_VALUE.PARAM_ASSIGN 0/246

Во первых само срабатывание не имеет отношения к CWE 121 и 122, во вторых значение во многих случаях сразу же возвращается
(возьмем почти любой файл), что означает, что переменная не unused.


############################################################
############################################################


3) CWE134_Uncontrolled_Format_String:

    INVARIANT_RESULT: 250/250

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как 5!=5 или 5==5. На такие выражения и ругается Svace.

    REDUNDANT_COMPARISON.RET: 100/100

Все срабатывания анализатора являются истинными, поскольку в juliet предпринимается попытка запутать СА реализацией
False или True как 5!=5 или 5==5. На такие выражения и ругается Svace.

    UNREACHABLE_CODE.RET: 100/100

Все срабатывания являются истинными, представляют из себя код, не выполняющийся в случае
присутствия дефекта типа REDUNDANT_COMPARISON.RET, что для тестирования повсеместно в juliet.

    SIMILAR_BRANCHES: 55/55

Все срабатывания детектора являются истинными. Анализатор срабатывает на условный оператор if с условием формата
*ReturnsTrueOrFalse. Обе ветви оператора во всех случаях действительно идентичны.

ПРИМЕЧАНИЕ: в ряде случаев по какой-то причине Svace выдает предупреждение не нас сам if с такой функцией, а раньше по строкам.
В частности предупреждение перепрыгивает "мертвый код" на строке 184 и выдается на строку 183, когда дефект на 185 в
файле: CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12.c

    HANDLE_LEAK.EX.EXCEPTION: 0/30

Все срабатывания, включая те, которые автоматически были предположены как верные, являются скорее всего ложными (81 штука).
Svace ругается на HANDLE_LEAK, или в контексте juliet, на не закрытый файл в функции.
Все срабатывания идентичны таковому в CWE134_Uncontrolled_Format_String__char_file_vfprintf_72a.cpp.
Svace ругается на присвоение 53 строчку, где в переменную pFile кладется хендлер, и на 72 строчку, где якобы происходит его утечка.
Также Svace выдает "исключение" на 71 строку с вызовом badsink.
Согласно документации juliet - срабатывания на badsink приравниваются к срабатыванию на строчку с дефектом, однако суть
дефекта на 57 строке принципиально другая, а причина срабатывания на 71 строке неясна.
В остальных 80 файлах аналогично. Срабатывания скорее ложные, либо сопровождены недостаточной информацией.

    PROC_USE.VULNERABLE: 150/150

Срабатывания детектора являются истинными. Анализатор ловит использование небезопасных самих по себе функций, как пример -
функция wscpy.

    PROC_USE.VULNERABLE.GETENV: 555/555

Срабатывания детектора являются истинными, но не относящимися к классу ошибок CWE134.


############################################################
############################################################



Итог: На данный момент
точность 9953 / 14478
полнота: 6500+ / 14478

