##########################################################################################################
################################################ NON PERSPECTIVE BEGIN ###################################
##########################################################################################################
## class config_settings
CWE 15 External Control of System or Configuration Setting
 - x, max: None 0/48 -
### class path_traversal
CWE 23 Relative Path Traversal
 - x, max: PROC_USE.VULNERABLE(-), 0/2400 -
CWE 36 Absolute Path Traversal
 - x, max: PROC_USE.VULNERABLE(-), 0/2400 -
### class injections
CWE 78 Improper Neutralization of Special Elements used in
an OS Command ('OS Command Injection')
 - x, max: PROC_USE.VULNERABLE(-), 0/4800 -
CWE 90 Improper Neutralization of Special Elements used in
an LDAP Query ('LDAP Injection')
 - x, max: None, 0/480 -
### class process_control
CWE 114 Process Control
 - x, max: None, 0/576 -
### class encoding_troubles
CWE 176 Improper Handling of Unicode Encoding
 - x, max: None, 0/48 -
CWE 196 Unsigned to Signed Conversion Error
 - x max: PROC_USE.RAND (-) 0/18 -
CWE 197 Numeric Truncation Error
 - x  max: PROC_USE.RAND (-) 0/864 -
### class sensitive_info_truncation
CWE 222 Truncation of Security-relevant Information
 - x max: None 0/18 -
CWE 223 Omission of Security-relevant Information
 - x max: None 0/18 -
CWE 226 Sensitive Information Uncleared Before Release
 - x max: None 0/72 -
### class improper_clear
CWE 244 Improper Clearing of Heap Memory Before Release
('Heap Inspection')
 - x max: None 0/72 -
### class dns_troubles
CWE 247 Reliance on DNS Lookups in a Security Decision
 - x max: None 0/18 -
### class password_storage
CWE 256 Plaintext Storage of a Password
 - x max: None 0/96 -
CWE 259 Use of Hard-coded Password
 - x max: None 0/96 -
### class privilege_troubles
CWE 272 Least Privilege Violation
 - x max: None 0/252 -
CWE 273 Improper Check for Dropped Privileges
 - x max: None 0/36 -
CWE 284 Improper Access Control
 - x max: None 0/216 -
### class cryptographic_troubles
CWE 319 Cleartext Transmission of Sensitive Information
 - x max: None 0/192 -
CWE 321 Use of Hard-coded Cryptographic Key
 -x max: None 0/96 -
CWE 325 Missing Required Cryptographic Step
 - x max: None 0/72 -
CWE 327 Use of a Broken or Risky Cryptographic Algorithm
 - x max: None 0/54 -
CWE 328 Reversible One-Way Hash
 - x max: None 0/54 -
CWE 338 Use of Cryptographically Weak PRNG
 - x max: None 0/18 -
### class incorrect_error_detection
CWE 390 Detection of Error Condition Without Action
 - PROC_USE_RAND (-) max: PROC_USE_RAND 0/90 -
CWE 391 Unchecked Error Condition
 - x, max: None 0/54 -
CWE 396 Declaration of Catch for Generic Exception
 - x, max: REDUNDANT_COMPARISON.RET (-) 0/54 -
CWE 397 Declaration of Throws for Generic Exception
 - x, max: REDUNDANT_COMPARISON.RET (-) 0/20 -
### class poor_code_quality
CWE 398 Indicator of Poor Code Quality
 -x, max: PROC_USE.RAND (-) 0/181 -
    P.S. Срабатывания на другой код "низкого качества" у Svace в рамках данного CWE верные
### class uncontrolled_resource_consumption
CWE 400 Uncontrolled Resource Consumption ('Resource
Exhaustion')
 - x, max:PROC_USE_RAND 0/720 -
    P.S. Срабатывания Svace хоть очень часто (особенно PROC_USE.RAND)  совпадают по стрчоке с нужными,
    но по смыслу принципиально иные
### class expected_behavior_violation
CWE 440 Expected Behavior Violation
 - x. 0/1 -
	P.S. Несоответствие функции спецификации. Svace не ловит, но идея примера забавная.
### class incomplete_cleanup
CWE 459 Incomplete Cleanup
 - x, max: INVARIANT_RESULT(-) 0/36 -
	P.S. Что происходит с INVARIAN_RESULT? Глюки?
### class data_struct_Sentinel
CWE 464 Addition of Data Structure Sentinel
 - x, max: UNUSED_VALUE.PARAM_ASSIGN (-) 0/48 -
###
CWE 478 Missing Default Case in Switch Statement
 - x, max: PROC_USE.RAND(-) 0/18 -
###
CWE 479 Signal Handler Use of a Non-reentrant Function
 - x, max: INVARIANT_RESULT(-) 0/18 -
###
CWE 480 Use of Incorrect Operato
 - x, max: PROC_USE.RAND (-) 0/18 -
###
CWE 500 Public Static Field Not Marked Final
 - x, max: None 0/1 -
###
CWE 506 Embedded Malicious Code
 - x, max: LOCAL_VAR.HUGE None 0/ 158 -
	P.S. Не совсем понятно, почему 2^16 это слишком большая переменная.
	CWE506_Embedded_Malicious_Code__file_transfer_connect_socket_01.c 
CWE 510 Trapdoor
 - x, max: INVARIANT_RESULT 0/ 70 -
CWE 511 Logic/Time Bomb
 - x, max: INVARIANT_RESULT 0/ 72 -
###
CWE 546 Suspicious Comment
 - x, max: INVARIANT_RESULT 0/ 90 -
	P.S. Разве не хорошая идея для MIGHT чекера? надо проверить в отключенных у Svace
### class dead_code
CWE 561 Dead Code
 - x, max: None 0/ 2 -
	P.S. Оба juliet тесткейза на printLine после return. Разве не должно быть хотя бы might проверки на такие случаи?
### class fixed_address_assignment
CWE 587 Assignment of a Fixed Address to a Pointer
 - x, max: INVARIANT_RESULT 0/ 18 -
	P.S. Вполне логичная идея для MIGHT чекера. Если в Svace его нет, то почему?
### class non_struct_pointer_child_access
CWE 588 Attempt to Access Child of a Non-structure Pointer
 - x, max: UNINIT.LOCAL_VAR 0/ 80 -
	P.S. Разве не хорошая идея для MIGHT чекера? отследить синтаксически хотя-бы некоторые касты?
	+ проблемы из-за staticTrue опять (40 UNINIT'ов)
### CWE improper_data_lock
CWE 591 Sensitive Data Storage in Improperly Locked
Memory
 - x, max: None 0/ 96 -
### class same_port_bindings
CWE 605 Multiple Binds to Same Port
 - x, max: INVARIANT_RESULT None 0/18 -
### class loop_input_unchecked
CWE 606 Unchecked Input for Loop Condition
 - x, max: PROC_USE.VULNERABLE.GETENV 0/480 -
	P.S. опять неверные HANDLE_LEAK.EX.EXCEPTION. Стоит ли оформить тикет?
	+ сложный ли класс ошибок для проверки?
### class comment_info_disclosure
CWE 615 Information Exposure Through Comments
 - x, max: None 0/18 -
###
CWE 617 Reachable Assertion
 - x, max: UNCHECKED_FUNC_RES.LIB.STRICT  0/306 -
### class password_change
CWE 620 Unverified Password Change
 - x, max: None 0/18 -
### class operation_resource_wrong_time
CWE 666 Operation on Resource in Wrong Phase of Lifetime
 - x, max: UNREACHABLE_CODE.RET  None 0/90 -
### class expiration_operation
CWE 672 Operation on a Resource after Expiration or Release
 - x, max: INVARIANT_RESULT 0/47 -
	P.S. Опять кривые MEMORY_LEAK.EX.EXCEPTION. стоит проверить
### class uncontrolled_recursion
CWE 674 Uncontrolled Recursion
 - x, max: None 0/2 -
### class dangerous_funcs_use
CWE 676 Use of Potentially Dangerous Function
 - x, max: INVARIANT_RESULT 0/18 -
	P.S. отсутствие проверки cin на какой-нибудь setw - плохо. Не идея для MIGHT чекера?
### class incorrect_conversion
CWE 681 Incorrect Conversion between Numeric Types
 - x, max: INVARIANT_RESULT 0/54 -
	P.S. Неужели нет MIGHT чекера, смотрящего проверяется ли кастящаяся к меньшему типу переменная на границы?
### class incorrect_args
CWE 685 Function Call With Incorrect Number of Arguments
 - x, max: INVARIANT_RESULT 0/18 -
	P.S. Неужели нет такого чекера?? (с анализом вызываемой функции по указателю)
CWE 688 Function Call With Incorrect Variable or Reference
as Argument
 - x, max: INVARIANT_RESULT None 0/18 -
### class rsa-oaep
CWE 780 Use of RSA Algorithm without OAEP
- x, max: None 0/18 -
### class path_manipulation_Without_buffer
CWE 785 Use of Path Manipulation Function without
Maximum-sized Buffer
 - x, max: None 0/18 -
### class unlock_unlocked
CWE 832 Unlock of a Resource that is not Locked
 - x, max: INVARIANT_RESULT  0/18 -
	P.S. Разве не идея для might чекера?
### class incompatible_type_access
CWE 843 Access of Resource Using Incompatible Type ('Type
Confusion')
 - x, max: RETURN_LOCAL_ADDR None 0/80 -
	P.S. неверные DEREF_OF_NULL.ASSIGN из-за staticTrue
	+ вопросы по RETURN_LOCAL_ADDR (реально ли дефект)


##########################################################################################################
################################################ NON PERSPECTIVE END ###################################
##########################################################################################################

##########################################################################################################
################################################ SMALL PERSPECTIVE BEGIN ###################################
##########################################################################################################
### class reliance_layout
CWE 188 Reliance on Data/Memory Layout
 - VARIABLE_IS_NOT_ARRAY, max: VARIABLE_IS_NOT_ARRAY, 18/36 +
    EXTRA: DEAD_CODE - 3 Svace чекера на мертвыйы код
### class dangerous_func_usage
CWE 242 Use of Inherently Dangerous Function
 - PROC_USE.VULNERABLE, max: PROC_USE.VULNERABLE 18/18 -+
    P.S. Полностью покрывается lines.
### class return_value
CWE 252 Unchecked Return Value
 - UCHECKED_FUNC_RES.STRICT, UNCHECKED_FUNC_RES.LIB.STRICT.MACRO, UNCHECKED_FUNC_RES.STAT
    max: UNCHECKED_FUNC_RES.LIB.STRICT (+) ~120/630 +-
    Extra: правильный Svace DEAD_CODE (INVARIANT RESULT)
CWE 253 Incorrect Check of Function Return Value
 - UNCHECKED_FUNC_RES.FREAD
    max: UNCHECKED_FUNC_RED.FREAD (+) ~18/684 -+
    P.S. Есть срабатывания других чекеров, косвенно относящихся к проблеме, но не напрямую. все равно макс 100/630
### class race_conditions
CWE 364 Signal Handler Race Condition
 - x max: INVARIANT_RESULT (-) 0/18 -
CWE 366 Race Condition within a Thread
 - x max: INVARIANT_RESULT (-) 0/36 -
CWE 367 Time-of-check Time-of-use (TOCTOU) Race
Condition
 - TOCTTOU_SEQUENCE max: CHECK_AFTER_PASS_TO_PROC (-) 7/36 -+
    P.S. TOCTTOU_SEQUENCE соотносится по строкам.
### class insecure_temporary
CWE 377 Insecure Temporary File
 - PROC_USE.VULNERABLE.TEMP (+) max: PROC_USE.VULNERABLE.TEMP 54/144 -+
    P.S. PROC_USE.VULNERABLE.TEMP соотносится по lines.
### class search_path_abuses
CWE 426 Untrusted Search Path
 - x, max: PROC_USE.VULNERABLE(-) 0/192 -
CWE 427 Uncontrolled Search Path Element
 - x, max: PROC.USE.VULNERABLE.GETENV(+-), 48/480 +
	P.S. ОШИБОЧНЫЕ СРАБАТЫВАНИЯ HANDLE_LEAK.EXCEPTION
### class size_of_pointer_type
CWE 467 Use of sizeof() on a Pointer Type
 - SIZEOF_POINTER_TYPE.CHAR(+), max: 54/54 -+
	P.S. Полностью найдено lines
CWE 468 Incorrect Pointer Scaling
 - SIZEOF_POINTER_TYPE, max: SIZEOF_POINTER_TYPE(+) 19/37 -+
	P.S. Полностью сопоставлено lines. Мб найдется тикет.
CWE 469 Use of Pointer Subtraction to Determine Size
 - x, max: UNREACHABLE_CODE.RET (-) 0/36 -
###
CWE 475 Undefined Behavior For Input to API
 -x, max: BUFFER_OVERFLAP (+) 18/36 -+
	P.S. Полностью сопоставлено lines. Мб найдется тикет.
CWE 481 Assigning instead of Comparing
 - UNUSED_FUNC_RES.REWRITE.MINOR, max: UNUSED_FUNC_RES.REWRITE.MINOR 18/18 -+
	P.S. Полностью покрывается lines. Старый знакомый чекер.
CWE 482 Comparing instead of Assigning
 - NO_EFFECT, max: NO_EFFECT (+) 18/18 -+
	P.S. Полностью покрывается lines.
CWE 483 Incorrect Block Delimitation
 - CONFUSING_IDENTATION (+), max: 1/20 -+
	P.S. Полностью покрывается lines. Интересная идея для MIGHT чекера, нет?
CWE 484 Omitted Break Statement in Switch
 - FALL_THROUGH, max FALL_THROUGH (+) 18/18 +-
	P.S. Надо проверить покрытие lines
###
CWE 526 Information Exposure Through Environmental Variables
 - x, max: PROC_USE.VULNERABLE.GETENV  18/ 18 -+
	P.S. Понлостью покрывается lines
CWE 534 Information Exposure Through Debug Log Files
 - x, max: None 0/ 36 -
CWE 535 Information Exposure Through Shell Error Message
 - x, max: None 0/ 36 -
### class return_stack_var
CWE 562 Return of Stack Variable Address
 - RETURN_LOCAL_ADDR, RETURN_LOCAL_VAR, max: RETURN_LOCAL_ADDR  2/3 -+
	P.S. Svace не хочет проверять, что возвращаемое методом-геттером у локального объекта (следовательно и поля локальны)
	подпадает под юзкейс. Норма?
	CWE562_Return_of_Stack_Variable_Address__return_local_class_member_01.cpp
### class redundant_comparison
CWE 570 Expression is Always False
 - INVARIANT_RESULT, NO_EFFECT, REDUNDANT_COMPARISON.RET, UNREACHABLE_CODE, UNREACHABLE_CODE.RET  , 
	max: REDUNDANT_COMPARISON.RET 11/ 16 +-
	P.S. По крайней мере одно срабатывание UNREACHABLE_CODE и REDUNDANT_COMPARISON.RET по одной причине.
	Стоит добавить суперэвристику, что если забайндилось одно, возможно забайндилось другое. Возможно более логично пересмотреть всю концепцию.
CWE 571 Expression is Always True
 - INVARIANT_RESULT, NO_EFFECT, max: INVARIANT_RESULT 3/ 16 -+
	P.S. Скорее всего тесты одни и те же, что и CWE 570. Надо проверить. В любом случае разница с 570 странна.
	Возможно здесь скрывается какой-то тикет.
### class improper_initialization
CWE 665 Improper Initialization
 - NONTERMINATED_STRING.STYLE, max: NONTERMINATED_STRING.STYLE None 84/193 -+
	P.S. очень косвенное соответствие CWE 665. Спросить по данному поводу.
### class no_unlock
CWE 667 Improper Locking
 - NO_UNLOCK, NO_UNLOCK.STRICT, max: NO_UNLOCK.STRICT 18/18 +
	P.S. такая же логика как у MEMORY_LEAK возможно, ведь так же не освобождается хендлер. 
	эвристику следует распространить и на этот класс.
### class uninit_undefined_behavior
CWE 758 Reliance on Undefined, Unspecified, or
Implementation-Defined Behavior 
- UNINIT.LOCAL_VAR, NO_RETURN_VALUE , max: UNINIT.LOCAL_VAR 19/581 +-
	P.S. нет прямого соответствия CWE.
	+ Что за магия? UNINIT багует?:
	CWE758_Undefined_Behavior__char_alloca_use_03.c 
	CWE758_Undefined_Behavior__char_malloc_use_03.c
	+ полно теоретически верных MEMORY_LEAK'ов
	+ Не всё просмотрено, но может быть соответствие UNINIT'у
	+ наверняка будут тикеты на полноту, вряд ли точность
### class memory_allocation_tainted_int
CWE 789 Uncontrolled Memory Allocation (ALERT! another name now: Memory Allocation with Excessive Size Value)
 - TAINTED_INT, TAINTED_INT.MIGHT max: TAINTED_INT.MIGHT 208/960 +-
	P.S. надо более углубленно посмотреть на наличие тикетов
	+ опять съехала строка с предупреждением INVARIANT_RESULT: 
	CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03.c
### class redundat_comparison_loop
CWE 835 Loop with Unreachable Exit Condition ('Infinite
Loop')
 - REDUNDANT_COMPARISON.ALWAYS_FALSE, max: REDUNDANT_COMPARISON.ALWAYS_FALSE 1/6 -+


##########################################################################################################
################################################ SMALL PERSPECTIVE END ###################################
##########################################################################################################

############################################## class buffer_overflow BEGIN ##################################
CWE 121 Stack-based Buffer Overflow
 - BUFFER_OVERFLOW.EX, BUFFER_OVERFLOW.STRING, BUFFER_SHIFT, BUFFER_SIZE_MISMATCH, DYNAMIC_OVERFLOW.EX,
    OVERFLOW_AFTER_CHECK.EX, OVERFLOW_UNDER_CHECK.EX, STRING_OVERFLOW, TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.EX
    TAINTED_ARRAY_INDEX.MIGHT.
    max: BUFFER_OVERFLOW.EX (+), ~1600/4968 (уже с эвристиками) +-
CWE 122 Heap-based Buffer Overflow
 - BUFFER_OVERFLOW.STRING, DYNAMIC_OVERFOW, DYNAMIC_OVERFLOW.EX, DYNAMIC_SIZE_MISMATCH
    OVERFLOW_AFTER_CHECK.EX, OVERFLOW_UNDER_CHECK.EX, STRING_OVERFLOW, TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.EX
    TAINTED_ARRAY_INDEX.MIGHT, MEMORY_LEAK, MEMORY_LEAK.CTOR, MEMORY_LEAK.EX
    max: BUFFER_OVERFLOW.EX (+), ~1600/4968 (уже  с эвристиками) +-
CWE 123 Write-what-where Condition
 - x, max: INVARIANT_RESULT(-), 0/144 -
CWE 124 Buffer Underwrite ('Buffer Underflow')
 - BUFFER_UNDERFLOW, DYNAMIC_OVERFLOW, NEGATIVE_CODE_ERROR.EX, STATIC_OVERFLOW, STATIC_OVERFLOW.LOCAL,
    TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.MIGHT
    EXTRA: MEMORY_LEAK.* - Истинные побочные
    max: DYNAMIC_OVERFLOW (+), ~550/2048 +
CWE 126 Buffer Over-read
 - BUFFER_OVERFLOW.EX, BUFFER_SHIFT, DYNAMIC_OVERFLOW.EX, TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.EX,
    TAINTED_ARRAY_INDEX.MIGHT
    max: DYNAMIC_OVERFLOW.EX (+) ~540/1452 +
CWE 127 Buffer Under-read
 - BUFFER_UNDERFLOW, DYNAMIC_OVERFLOW, NEGATIVE_CODE_ERROR.EX, STATIC_OVERFLOW, STATIC_OVERFLOW.LOCAL,
    STRING_OVERFLOW, TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.MIGHT,
    EXTRA: MEMORY_LEAK.* - Истинные побочные
    max: STRING (+), ~660/2048 +
CWE 134 Uncontrolled Format String
 - x, max: PROC_USE.VULNERABLE.GETENV (-) 0/2880 -
############################################## class buffer_overflow END ##################################

############################################## class integer_overflow BEGIN ###############################
CWE 190 Integer Overflow or Wraparound
 - INTEGER_OVERFLOW, max: INTEGER_OVERFLOW, 613/2592 -
CWE 191 Integer Underflow (Wrap or Wraparound)
 - INTEGER_OVERFLOW, max: INTEGER_OVERFLOW, 372/1584 -
############################################## class integer_overflow END ###############################

############################################## class sign_extensions BEGIN ##############################
CWE 194 Unexpected Sign Extension
  - BUFFER_UNDERFLOW, NEGATIVE_CODE_ERROR.EX, OVERFLOW_UNDER_CHECK, STATIC_OVERFLOW, STATIC_OVERFLOW.LOCAL,
    TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.MIGHT, TAINTED_INT, TAINTED_INT.MIGHT,
    max: NEGATIVE_CODE_ERROR.EX (+) 1200/1152 +
CWE 195 Signed to Unsigned Conversion Error
 - BUFFER_UNDERFLOW, INTEGER_OVERFLOW, NEGATIVE_CODE_ERROR.EX, STATIC_OVERFLOW, STATIC_OVERFLOW.LOCAL,
    TAINTED_ARRAY_INDEX, TAINTED_ARRAY_INDEX.MIGHT, TAINTED_INT, TAINTED_INT.MIGHT
    max: NEGATIVE_CODE_ERROR.EX (+) ~2000/1152 +
    P.S. 700 срабатываний NEGATIVE... - скорее всего все заматчится к этим 700 и будет ~900
############################################## class sign_extensions END ##############################


################################################ class division_by_zero (+-) BEGIN ###########################
CWE 369 Divide By Zero
 - DIVISION_BY_ZERO, DIVISION_BY_ZERO.EX max: DIVISION_BY_ZERO.EX ~740/864 +
    P.S. Уже видно лишние срабатывания в GOOD функциях.
################################################ class division_by_zero (+-) END ###########################

################################ class memory_leaks BEGIN ###############################
CWE 401 Improper Release of Memory Before Removing Last
Reference ('Memory Leak')
 - FREE_NOONHEAP_MEMORY, MEMORY_LEAK, MEMORY_LEAK.CTOR, MEMORY_LEAK.CTOR.EXCEPTION, MEMORY_LEAK.EX,
    MEMORY_LEAK.EX.EXCEPTION, MEMORY_LEAK.STRDUP.STRUCT, MEMORY_LEAK.STRUCT ~1000 / 1658 +-
    P.S. Уже 351 соотносится с анализом достигающих определений только для MEMORY_LEAK. Надо доделать для остальных
CWE 404 Improper Resource Shutdown or Release
 - HANDLE_LEAK max: HANDLE_LEAK 18/384 -+
    P.S. Скорее всего логика HANDLE_LEAK не совсем соотносится с логикой juliet
CWE 415 Improper Resource Shutdown or Release
 - DOUBLE_FREE.EX, max: DOUBLE_FREE.EX 665/962 +
    P.S. Верные срабатывания Svace в good функциях на USE_AFTER_FREE,  PASSED_TO_PROC_AFTER_FREE.EX, но не к делу
    Неверные на MEMORY_LEAK.EX
CWE 416 Use After Free
 - DEREF_AFTER_FREE, DEREF_OF_NULL.EX, USE_AFTER_FREE ~400/459 +
    P.S. Верные срабатывания Svace на MEMORY_LEAK, MEMORY_LEAK.EX, PASSED_TO_PROC_AFTER_FREE.EX, но не к делу

# subclass file_descriptors BEGIN 
CWE 773 Missing Reference to Active File Descriptor or Handle
 - HANDLE_LEAK, HANDLE_LEAK.CTOR, max: HANDLE_LEAK 104/144 +-
	P.S. Возможна пара тикетов. Пропуск полноты:
	CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_83_bad.cpp 
CWE 775 Missing Release of File Descriptor or Handle after
Effective Lifetime
 -  HANDLE_LEAK, HANDLE_LEAK.CTOR, max: HANDLE_LEAK 104/144 +-
	P.S. Возможна пара тикетов. Пропуск полноты:

	+ Дублицированные CWE с точки зрения Svace
# subclass file_descriptors END

# subclass null_pointer_dereference BEGIN
CWE 476 NULL Pointer Dereference
 - DEREF_AFTER_NULL.EX, DEREF_OF_NULL, DEREF_OF_NULL.EX, DEREF_OF_NULL.EX.COND,
	DEREF_OF_NULL.STRICT 
	max: ~288/348 +-
	P.S. Почему DEREF_AFTER_NULL и NULL_AFTER_DEREF Вообще в этом CWE даже со
	стороны juliet.
	правильные MEMORY_LEAK'и

	скорее всего находится lines. мб будут тикеты
# subclass null_pointer_dereference END

# subclass (?) double_close BEGIN
CWE 675 Duplicate Operations on Resource
 - DOUBLE_CLOSE, DEREF_OF_NULL.RET.LIB.PROC(?), DEREF_OF_NULL.EX(?), NEGATIVE_CODE_ERROR.EX(?), 
	max: DEREF_OF_NULL.RET.LIB.PROC 92/192 +
	P.S. DEREF_OF_NULL.EX - нет ли undefined behaviour с fclose(NULL)?
	+ опять вероятно неверные HANDLE_LEAK.EX (или наоборот слинковать с DOUBLE_CLOSE)
	+ логически верные PASSED_TO_PROC_AFTER_RELEASE
	+ логически верные NEGATIVE_CODE_ERROR.EX, если DEREF_OF_NULL.EX верен.
	+ вряд ли тикеты на точность
# subclass (?) double_close END

# subclass (?) deref_of_null_result BEGIN
CWE 690 Unchecked Return Value to NULL Pointer
Dereference
 - DEREF_OF_NULL.RET.LIB.PROC, HANDLE_LEAK(?) , max: DEREF_OF_NULL.RET.LIB.PROC 40/960 +-
	+ стоит ли линковать HANDLE_LEAK
	+ полно бессмысленных memory_leak (опять беды с static переменными)
	+ наверняка тикеты на полноту + точность
# subclass (?) deref_of_null_result END

# subclass (-) free_not_on_Start BEGIN
CWE 761 Free of Pointer not at Start of Buffer
 - x, max: MEMORY_LEAK 0/576 -
	P.S.
	+ Разве не хорошая идея для MIGHT чекера? Так сложно отследить есть ли алиас на начало чанка памяти? 
	CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01.c
	+ опять верные MEMORY_LEAK
# subclass (-) free_not_on_Start END
######################################class memory_leaks END ####################################################

############################################# class uninit_use (-+) BEGIN ############################################
CWE 457 Use of Uninitialized Variable
 - UNINIT.LOCAL_VAR, UNINIT.CTOR, max: UNINIT.LOCAL_VAR(+)  185/948 +-
	P.S. Правильные MEMORY_LEAK, MEMORY_LEAK.STRUCT, juliet почему-то даже не
	сообщает о возможных CWE 401.
	В чем причина отсутствия обработки функций StaticTrue, StaticFalse,
	статических переменных в файле (StaticFive)? либо обработка неверная.
############################################# class uninit_use (-+) END ############################################

############################################# class unused_variable (-+) BEGIN ####################################
CWE 563 Unused Variable
 - UNUSED_VALUE, UNUSED_VALUE.PARAM_ASSIGN, max: UNUSED_VALUE.PARAM_ASSIGN 101/ 512 -+
	P.S. Скорее всего полностью покрывается lines, но вероятно , что есть пара тикетов, ибо максимум 100/500 это мало. стоит рассмотреть
############################################# class unused_variable (-+) BEGIN ####################################

############################################# class free_nonheap_memory BEGIN ###################################
CWE 590 Free of Memory not on the Heap
 - FREE_NONHEAP_MEMORY, max: FREE_NONHEAP_MEMORY 1881/ 2680 +-
	P.S. Возможно полностью покрывается lines, но стоит рассмотреть полностью + возможны тикеты, 
	но скорее всего хорошее межпроцедурное покрытие (рассмотрел 100 штук).
	+ проблемы из-за staticTrue опять (918 DEREF_OF_NULL'ов)
############################################# class free_nonheap_memory END ###################################

########################################### class integer_to_buf_overflow BEGIN ######################################
CWE 680 Integer Overflow to Buffer Overflow
 - INTEGER_OVERFLOW, TAINTED_INT, TAINTED_INT.LOOP, TAINTED_INT.LOOP.MIGHT, TAINTED_INT.MIGHT
	 max: INTEGER_OVERFLOW ~400/576 +
	P.S. Здесь опять неправильная обработка static int'ов. Скорее всего покрывается не все и будут тикеты.
	+ возможно использовать buffer_overflow_superheuristic для соотношения INTEGER_OVERFLOW и TAINTED_INT
	CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_45.c 
	+ В чем проблема NEGATIVE_CODE_ERROR.EX? ну <0 и ладно?
########################################### class integer_to_buf_overflow END ######################################

########################################################### class heap_incompatible BEGIN############################
CWE 762 Mismatched Memory Management Routines
 - HEAP_INCOMPATIBLE.ARRAY, HEAP_INCOMPATIBLE.CTOR, HEAP_INCOMPATIBLE.FREE 
	max: HEAP_INCOMPATIBLE.FREE ~2500/3564 +-
	P.S. тикетов скорее всего нет. покрытие lines 
	+ беды с extern const int GLOBAL_CONST_FALSE; /* false */
##############################################################class heap_incompatible END##########################################






